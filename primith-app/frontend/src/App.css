@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.ProseMirror.ProseMirror-focused {
  outline: none;
  border: none;
  box-shadow: none;
}

.ProseMirror {
  padding: 10px;
  min-height: 300px;
  min-height: 100%;
  overflow-x: auto;
}

.ProseMirror:focus {
  outline: none;
}

.ProseMirror img {
  max-width: 100%;
  height: auto;
}

.ProseMirror table {
  border-collapse: collapse;
  margin: 0;
  table-layout: fixed;
  width: 100%;
}

.ProseMirror td,
.ProseMirror th {
  border: 1px solid #ced4da;
  box-sizing: border-box;
  min-width: 1em;
  padding: 3px 5px;
  position: relative;
  vertical-align: top;
}

.ProseMirror p {
  margin-bottom: 0rem !important;
  margin-top: 0.5rem !important;
}

.ProseMirror [data-type="info-panel"] p {
  margin-bottom: 0 !important;
  margin-top: 0.1rem !important;
}

.ProseMirror th {
  background-color: #f1f3f5;
  font-weight: bold;
  text-align: left;
}

.ProseMirror .selectedCell {
  position: relative;
}

.ProseMirror .selectedCell:after {
  background: rgba(161, 193, 255, 0.4);
  content: "";
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  pointer-events: none;
  position: absolute;
  z-index: 2;
}

.ProseMirror p[style*="color"] {
  color: attr(style);
}

.ProseMirror .highlight {
  background-color: attr(data-color);
}

.dropdown-menu-x0 {
  min-width: 250px;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.search-replace-menu-item {
  padding: 0.5rem;
  margin: 0.25rem 0;
}

.search-replace-menu-item:hover {
  background-color: #f3f4f6;
  border-radius: 0.375rem;
}

.editor-block {
  cursor: text;
}

.editor-block > div {
  cursor: default;
}

.editor-block [contenteditable="true"] {
  cursor: text;
}

.ProseMirror table {
  @apply mt-1 mb-4 w-full border-collapse;
}

.tiptap p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}

.prose :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
  border-radius: 0.5rem;
}

.calendar-popover {
  z-index: 1000;
}

.ProseMirror [data-type="variable"] {
  background-color: rgba(59, 130, 246, 0.1);
  border-radius: 3px;
  padding: 2px 4px;
  font-family: monospace;
  color: #3b82f6;
}

.ProseMirror:not(.editable) .variable-node {
  display: inline-flex;
  align-items: center;
  border-radius: 0.375rem;
  padding: 0.25rem 0.5rem;
  font-size: 0.75rem;
  font-weight: 500;
  white-space: nowrap;
  background-color: #ecfdf5; /* Green background */
  color: #047857; /* Green text */
  box-shadow: inset 0 0 0 1px rgba(4, 120, 87, 0.1); /* Green ring */
}

.ProseMirror.editable .variable-node {
  display: inline-flex;
  align-items: center;
  border-radius: 0.375rem;
  padding: 0.25rem 0.5rem;
  font-size: 0.75rem;
  font-weight: 500;
  white-space: nowrap;
  background-color: #dbeafe; /* Blue background */
  color: #3b82f6; /* Blue text */
  box-shadow: inset 0 0 0 1px rgba(59, 130, 246, 0.1); /* Blue ring */
}

/* 1) Make the <li> itself a flex container and center everything vertically */
.ProseMirror ul[data-type="taskList"] > li {
  display: flex;
  align-items: center;
  gap: 0.5rem;               /* space between checkbox and text */
}

/* 2) Ensure the <label> (with the <input>) also flex‑centers its contents */
.ProseMirror ul[data-type="taskList"] > li > label {
  display: flex;
  align-items: center;
  margin: 0;
}

/* 3) Do the same for the wrapping <div> around your <p> */
.ProseMirror ul[data-type="taskList"] > li > div {
  display: flex;
  align-items: center;
  flex: 1;                   /* fill remaining width */
  margin: 0;
}

/* 4) Kill the default paragraph margins inside the task‑list item */
.ProseMirror ul[data-type="taskList"] > li > div p {
  margin: 0;
  line-height: 1.2;          /* tweak as needed for perfect alignment */
}

/* 5) Finally, nudge the native checkbox into the middle of its line‑box */
.ProseMirror ul[data-type="taskList"] input[type="checkbox"] {
  vertical-align: middle;
  margin: 0;
}


.ProseMirror ul[data-type="taskList"] li > div p {
  margin-top:    0 !important;
  margin-bottom: 0 !important;
}

.search-highlight {
  /* light blue at 30% opacity */
  background-color: rgba(0, 191, 255, 0.3);
}

.search-highlight-current {
  /* more vivid blue at 70% opacity */
  background-color: rgba(0, 191, 255, 0.7);
}